{"ast":null,"code":"import Post from '../models/Post.js';\nimport multer from 'multer';\nimport fs from 'fs';\n\n// Configure multer storage\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n    cb(null, file.fieldname + '-' + uniqueSuffix);\n  }\n});\n\n// Create the upload middleware\nconst uploadMiddleware = multer({\n  storage,\n  fileFilter: (req, file, cb) => {\n    if (!file) {\n      cb(new Error('File is required'));\n    } else {\n      cb(null, true);\n    }\n  }\n}).single('file');\nexport const createPostController = async (req, res) => {\n  uploadMiddleware(req, res, async err => {\n    if (err) {\n      // Handle error\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    const {\n      title,\n      summary,\n      content\n    } = req.body;\n    let newPath = null;\n    if (req.file) {\n      const {\n        originalname,\n        path\n      } = req.file;\n      const parts = originalname.split('.');\n      const ext = parts[parts.length - 1];\n      newPath = path + '.' + ext;\n      fs.renameSync(path, newPath);\n    }\n    const postDoc = await Post.create({\n      title,\n      summary,\n      content,\n      cover: newPath || ''\n    });\n    res.json(postDoc);\n  });\n};\nexport const updatePostController = async (req, res) => {\n  uploadMiddleware(req, res, async err => {\n    if (err) {\n      // Handle error\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    let newPath = null;\n    if (req.file) {\n      const {\n        originalname,\n        path\n      } = req.file;\n      const parts = originalname.split('.');\n      const ext = parts[parts.length - 1];\n      newPath = path + '.' + ext;\n      fs.renameSync(path, newPath);\n    }\n    const {\n      id,\n      title,\n      summary,\n      content\n    } = req.body;\n    const postDoc = await Post.findByIdAndUpdate(id, {\n      title,\n      summary,\n      content,\n      cover: newPath || ''\n    }, {\n      new: true\n    });\n    res.json(postDoc);\n  });\n};\nexport const getPostsController = async (req, res) => {\n  res.json(await Post.find().populate('author', ['username']));\n};\nexport const getPostByIdController = async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const postDoc = await Post.findById(id).populate('author', ['username']);\n  res.json(postDoc);\n};\nexport default {\n  createPostController,\n  updatePostController,\n  getPostsController,\n  getPostByIdController\n};","map":{"version":3,"names":["Post","multer","fs","storage","diskStorage","destination","req","file","cb","filename","uniqueSuffix","Date","now","Math","round","random","fieldname","uploadMiddleware","fileFilter","Error","single","createPostController","res","err","status","json","error","message","title","summary","content","body","newPath","originalname","path","parts","split","ext","length","renameSync","postDoc","create","cover","updatePostController","id","findByIdAndUpdate","new","getPostsController","find","populate","getPostByIdController","params","findById"],"sources":["C:/Users/HP/Desktop/online store website/Skinecare-Makeup/client/src/pages/Admin/CreatePost.js"],"sourcesContent":["import Post from '../models/Post.js';\r\nimport multer from 'multer';\r\nimport fs from 'fs';\r\n\r\n// Configure multer storage\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\r\n    cb(null, file.fieldname + '-' + uniqueSuffix);\r\n  },\r\n});\r\n\r\n// Create the upload middleware\r\nconst uploadMiddleware = multer({\r\n  storage,\r\n  fileFilter: (req, file, cb) => {\r\n    if (!file) {\r\n      cb(new Error('File is required'));\r\n    } else {\r\n      cb(null, true);\r\n    }\r\n  },\r\n}).single('file');\r\n\r\nexport const createPostController = async (req, res) => {\r\n  uploadMiddleware(req, res, async (err) => {\r\n    if (err) {\r\n      // Handle error\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n\r\n    const { title, summary, content } = req.body;\r\n    let newPath = null;\r\n\r\n    if (req.file) {\r\n      const { originalname, path } = req.file;\r\n      const parts = originalname.split('.');\r\n      const ext = parts[parts.length - 1];\r\n      newPath = path + '.' + ext;\r\n      fs.renameSync(path, newPath);\r\n    }\r\n\r\n    const postDoc = await Post.create({\r\n      title,\r\n      summary,\r\n      content,\r\n      cover: newPath || '',\r\n    });\r\n    res.json(postDoc);\r\n  });\r\n};\r\n\r\nexport const updatePostController = async (req, res) => {\r\n  uploadMiddleware(req, res, async (err) => {\r\n    if (err) {\r\n      // Handle error\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n\r\n    let newPath = null;\r\n    if (req.file) {\r\n      const { originalname, path } = req.file;\r\n      const parts = originalname.split('.');\r\n      const ext = parts[parts.length - 1];\r\n      newPath = path + '.' + ext;\r\n      fs.renameSync(path, newPath);\r\n    }\r\n\r\n    const { id, title, summary, content } = req.body;\r\n    const postDoc = await Post.findByIdAndUpdate(\r\n      id,\r\n      { title, summary, content, cover: newPath || '' },\r\n      { new: true }\r\n    );\r\n    res.json(postDoc);\r\n  });\r\n};\r\n\r\nexport const getPostsController = async (req, res) => {\r\n  res.json(await Post.find().populate('author', ['username']));\r\n};\r\n\r\nexport const getPostByIdController = async (req, res) => {\r\n  const { id } = req.params;\r\n  const postDoc = await Post.findById(id).populate('author', ['username']);\r\n  res.json(postDoc);\r\n};\r\nexport default {\r\n  createPostController,\r\n  updatePostController,\r\n  getPostsController,\r\n  getPostByIdController,\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}