{"ast":null,"code":"import Post from '../models/Post.js';\nimport fs from \"fs\";\nimport slugify from \"slugify\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n// Configure multer storage\n\nexport const createPostController = async (req, res) => {\n  try {\n    const {\n      title,\n      summary,\n      content\n    } = req.fields;\n    const {\n      photo\n    } = req.files;\n    // Validation\n    switch (true) {\n      case !title:\n        return res.status(500).send({\n          error: \"Title is required\"\n        });\n      case !summary:\n        return res.status(500).send({\n          error: \"Summary is required\"\n        });\n      case !content:\n        return res.status(500).send({\n          error: \"Content is required\"\n        });\n      case photo && photo.size > 1000000:\n        return res.status(500).send({\n          error: \"Photo is required and should be less than 1MB\"\n        });\n    }\n    const posts = new Post({\n      ...req.fields,\n      slug: slugify(title)\n    });\n    if (photo) {\n      posts.photo.data = fs.readFileSync(photo.path);\n      posts.photo.contentType = photo.type;\n    }\n    await posts.save();\n    res.status(201).send({\n      success: true,\n      message: \"Post Created Successfully\",\n      posts\n    });\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      error,\n      message: \"Error in creating product\"\n    });\n  }\n};\nconst getPostsController = async (req, res) => {\n  try {\n    const posts = await Post.find({}).select(\"-photo\").limit(12).sort({\n      createdAt: -1\n    });\n    res.status(200).send({\n      success: true,\n      countTotal: posts.length,\n      message: \"All Posts\",\n      posts\n    });\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      message: \"Error in getting products\",\n      error: error.message\n    });\n  }\n};\nconst getPostByIdController = async (req, res) => {\n  try {\n    const post = await Post.findOne({\n      slug: req.params.slug\n    }).select(\"-photo\");\n    res.status(200).send({\n      success: true,\n      message: \"Single Post Fetched\",\n      post\n    });\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      message: \"Error while getting single post\",\n      error\n    });\n  }\n};\nconst postPhotoController = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.pid).select(\"photo\");\n    if (post.photo.data) {\n      res.set(\"Content-type\", post.photo.contentType);\n      return res.status(200).send(post.photo.data);\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      message: \"Error while getting photo\",\n      error\n    });\n  }\n};\nconst deletePostController = async (req, res) => {\n  try {\n    await Post.findByIdAndDelete(req.params.pid).select(\"-photo\");\n    res.status(200).send({\n      success: true,\n      message: \"Post deleted successfully\"\n    });\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      message: \"Error while deleting post\",\n      error\n    });\n  }\n};\nconst updatePostController = async (req, res) => {\n  try {\n    const {\n      title,\n      summary,\n      content,\n      pid\n    } = req.fields;\n    const {\n      photo\n    } = req.files;\n    // Validation\n    switch (true) {\n      case !title:\n        return res.status(500).send({\n          error: \"Title is required\"\n        });\n      case !summary:\n        return res.status(500).send({\n          error: \"Summary is required\"\n        });\n      case !content:\n        return res.status(500).send({\n          error: \"Content is required\"\n        });\n      case !pid:\n        return res.status(500).send({\n          error: \"pid is required\"\n        });\n      case photo && photo.size > 1000000:\n        return res.status(500).send({\n          error: \"Photo is required and should be less than 1MB\"\n        });\n    }\n    const post = await Post.findByIdAndUpdate(req.params.pid, {\n      ...req.fields,\n      slug: slugify(title)\n    }, {\n      new: true\n    });\n    if (photo) {\n      post.photo.data = fs.readFileSync(photo.path);\n      post.photo.contentType = photo.type;\n    }\n    await post.save();\n    res.status(201).send({\n      success: true,\n      message: \"PostUpdated Successfully\",\n      post\n    });\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({\n      success: false,\n      error,\n      message: \"Error in updating post\"\n    });\n  }\n};","map":{"version":3,"names":["Post","fs","slugify","dotenv","config","createPostController","req","res","title","summary","content","fields","photo","files","status","send","error","size","posts","slug","data","readFileSync","path","contentType","type","save","success","message","console","log","getPostsController","find","select","limit","sort","createdAt","countTotal","length","getPostByIdController","post","findOne","params","postPhotoController","findById","pid","set","deletePostController","findByIdAndDelete","updatePostController","findByIdAndUpdate","new"],"sources":["C:/Users/HP/Desktop/online store website/Skinecare-Makeup/client/src/pages/Admin/CreatePost.js"],"sourcesContent":["import Post from '../models/Post.js';\r\nimport fs from \"fs\";\r\nimport slugify from \"slugify\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n// Configure multer storage\r\n\r\nexport const createPostController = async (req, res) => {\r\n  try {\r\n    const { title, summary, content } = req.fields;\r\n    const { photo } = req.files;\r\n    // Validation\r\n    switch (true) {\r\n      case !title:\r\n        return res.status(500).send({ error: \"Title is required\" });\r\n      case !summary:\r\n        return res.status(500).send({ error: \"Summary is required\" });\r\n      case !content:\r\n        return res.status(500).send({ error: \"Content is required\" });\r\n      case photo && photo.size > 1000000:\r\n        return res\r\n          .status(500)\r\n          .send({ error: \"Photo is required and should be less than 1MB\" });\r\n    }\r\n    const posts = new Post({ ...req.fields, slug: slugify(title) });\r\n    if (photo) {\r\n      posts.photo.data = fs.readFileSync(photo.path);\r\n      posts.photo.contentType = photo.type;\r\n    }\r\n    await posts.save();\r\n    res.status(201).send({\r\n      success: true,\r\n      message: \"Post Created Successfully\",\r\n      posts,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      error,\r\n      message: \"Error in creating product\",\r\n    });\r\n  }\r\n};\r\n\r\nconst getPostsController = async (req, res) => {\r\n  try {\r\n    const posts = await Post.find({})\r\n      .select(\"-photo\")\r\n      .limit(12)\r\n      .sort({ createdAt: -1 });\r\n    res.status(200).send({\r\n      success: true,\r\n      countTotal: posts.length,\r\n      message: \"All Posts\",\r\n      posts,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      message: \"Error in getting products\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n const getPostByIdController = async (req, res) => {\r\n  try {\r\n    const post = await Post.findOne({ slug: req.params.slug }).select(\"-photo\");\r\n    res.status(200).send({\r\n      success: true,\r\n      message: \"Single Post Fetched\",\r\n      post,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      message: \"Error while getting single post\",\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n const postPhotoController = async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.pid).select(\"photo\");\r\n    if (post.photo.data) {\r\n      res.set(\"Content-type\", post.photo.contentType);\r\n      return res.status(200).send(post.photo.data);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      message: \"Error while getting photo\",\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\n const deletePostController = async (req, res) => {\r\n  try {\r\n    await Post.findByIdAndDelete(req.params.pid).select(\"-photo\");\r\n    res.status(200).send({\r\n      success: true,\r\n      message: \"Post deleted successfully\",\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      message: \"Error while deleting post\",\r\n      error,\r\n    });\r\n  }\r\n};\r\n\r\nconst updatePostController = async (req, res) => {\r\n  try {\r\n    const { title, summary, content, pid } = req.fields;\r\n    const { photo } = req.files;\r\n    // Validation\r\n    switch (true) {\r\n      case !title:\r\n        return res.status(500).send({ error: \"Title is required\" });\r\n      case !summary:\r\n        return res.status(500).send({ error: \"Summary is required\" });\r\n      case !content:\r\n        return res.status(500).send({ error: \"Content is required\" });\r\n      case !pid:\r\n        return res.status(500).send({ error: \"pid is required\" });\r\n      case photo && photo.size > 1000000:\r\n        return res\r\n          .status(500)\r\n          .send({ error: \"Photo is required and should be less than 1MB\" });\r\n    }\r\n\r\n    const post = await Post.findByIdAndUpdate(\r\n      req.params.pid,\r\n      { ...req.fields, slug: slugify(title) },\r\n      { new: true }\r\n    );\r\n    if (photo) {\r\n      post.photo.data = fs.readFileSync(photo.path);\r\n      post.photo.contentType = photo.type;\r\n    }\r\n    await post.save();\r\n    res.status(201).send({\r\n      success: true,\r\n      message: \"PostUpdated Successfully\",\r\n      post,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send({\r\n      success: false,\r\n      error,\r\n      message: \"Error in updating post\",\r\n    });\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}